[TOC]

## 06 | 用“等待-通知”机制优化循环等待

### “等待-通知”机制

1.  线程要求条件**不满足**，则线程**阻塞**自己，进入**等待状态**。
2.  线程要求的条件**满足后**，**通知**等待的线程**重新执行**。

### 利用“就医流程”来理解

1.  一个就医流程

    >   1. 患者先去挂号，然后到就诊门口分诊，等待叫号；
    >   2. 当叫到自己的号时，患者就可以找大夫就诊了；
    >   3. 就诊过程中，大夫可能会让患者去做检查，同时叫下一位患者；
    >   4. 当患者做完检查后，拿检测报告重新分诊，等待叫号；
    >   5. 当大夫再次叫到自己的号时，患者再去找大夫就诊。

2.  细节分析

    >   1. 患者到就诊门口分诊，类似于线程要去**获取互斥锁**；当患者被叫到时，类似线程**已经获取到锁**了。
    >   2. 大夫让患者去做检查（缺乏检测报告不能诊断病因），类似于线程要求的**条件没有满足**。
    >   3. 患者去做检查，类似于线程进入**等待**状态；然后大夫叫下一个患者，这个步骤我们在前面的 “等待 - 通知” 机制中忽视了，这个步骤对应到程序里，本质是**线程释放持有的互斥锁**。
    >   4. 患者做完检查，类似于线程要求的**条件已经满足**；患者拿检测报告重新分诊，类似于线程需要**重新获取互斥锁**，这个步骤我们在前面的 “等待 - 通知” 机制中也忽视了

3.  一个**完整的“等待-通知”机制**：

    -   线程首先**获取互斥锁**，当线程要求的**条件不满足**时，**释放**互斥锁，进入**等待状态**。
    -   当要求的**条件满足**时，**通知**等待的线程，**重新获取**互斥锁。

### 用 **synchronized** 实现 “等待-通知” 机制

1.  **wait() 操作工作原理图**
    -   ![img](imgs/c6640129fde927be8882ca90981613d0.png)
    -   **等待队列和互斥锁是一对一的关系，每个互斥锁都有息的等待队列**。
    -   当调用 `wait()` 后
        -   当前线程会被阻塞，并且进入右边的等待队列中，**这个等待队列也是互斥锁的等待队列**。
        -   进入等待队列同时，**会释放持有的互斥锁**，线程释放锁后，其他线程就有机会获得锁，并进入临界区。
2.  当线程条件满足时，**该怎么通知这个等待的线程呢**？
    -   当条件满足时，调用 `notify()`，会**通知**等待队列（互斥锁的等待队列）中的线程，**告诉它条件曾经满足过**。
    -   **notify() 操作工作原理图**
    -   ![img](imgs/1b3e999c300166a84f2e8cc7a4b8f78c.png)
    -   **为什么说是曾经满足过呢**？
        -   因为 notify() 只能保证**在通知时间点**，条件是满足的。而**执行时间点和通知的时间点**基本不会重合。
    -   被通知的线程要想**重新执行**，**仍然需要**获取到互斥锁。
3.  其他注意点
    -   wait()、notify()、notifyAll() 操作的等待队列是**互斥锁的等待队列**。
    -   如果 synchronized 锁定的是 this，那对应的一定是 this.wait()、this.notify()、this.notifyAll(); 如果 synchronized 锁定的是 target，那对应的是 target.wait()、target.notify()、target.notifyAll()。
    -   wait()、notify()、notifyAll() 调用的前提是已经获取了相应的互斥锁，所以我们都是在 **synchronized{} 内部调用**。如果在 synchronized{} 外部调用，或锁定的是 this，而调用 target 的话，JVM 会抛出一个运行时异常 `java.lang.IllegalMonitorStateException`。

### 小试牛刀：一个更好地资源分配器

1.  “等待-通知”机制中，我们需要考虑的**四个要素**：

    -   **互斥锁**
    -   **线程要求的条件**
    -   **何时等待**
    -   **何时通知**

2.  解决“**条件曾经满足过**”这个问题，需要重新检验条件是否满足。

    -   ```java
        
          while(条件不满足) {
            wait();
          }
        ```

3.  Allocator 代码

    -   ```java
        
        class Allocator {
          private List<Object> als;
          // 一次性申请所有资源
          synchronized void apply(
            Object from, Object to){
            // 经典写法
            while(als.contains(from) ||
                 als.contains(to)){
              try{
                wait();
              }catch(Exception e){
              }   
            } 
            als.add(from);
            als.add(to);  
          }
          // 归还资源
          synchronized void free(
            Object from, Object to){
            als.remove(from);
            als.remove(to);
            notifyAll();
          }
        }
        ```

### 尽量使用 notifyAll() 

1.  notify() 和 notifyAll() 的区别。

    -   **notify() 是会随机地通知等待队列中的一个线程，而 notifyAll() 会通知等待队列中的所有线程。**

2.  notify() 的风险：**可能导致某些线程永远不会被通知到**。

    >   **假设风险场景：**
    >
    >   
    >
    >   假设我们有资源 A、B、C、D，线程 1 申请到了 AB，线程 2 申请到了 CD。
    >
    >   此时线程 3 申请 AB，会进入等待队列（AB 分配给线程 1，线程 3 要求的条件不满足），线程 4 申请 CD 也会进入等待队列。
    >
    >   我们再假设之后线程 1 归还了资源 AB，如果使用 notify() 来通知等待队列中的线程，有可能被通知的是线程 4，但线程 4 申请的是 CD，所以此时线程 4 还是会继续等待，而真正该唤醒的线程 3 就再也没有机会被唤醒了。

3.  建议

    -   经过深思熟虑，否则尽量使用 notifyAll()。

### 总结

1.  “**等待-通知**”机制是一种非常普遍的线程间协作的方式。可以优化使用 “轮询等待” 某个状态。

### 扩展

#### wait() 和 sleep() 方法的区别是什么？

1.  wait 会释放所有锁，而 sleep 不会释放锁资源。
2.  wait 只能在同步方法和同步块中使用，而 sleep 任何地方都可以。
3.  wait 无需捕捉异常，而 sleep 需要。
4.  wait 是 Object 类的方法，而 sleep 是 Thread 的方法
5.  sleep 调用时必须指定时间。
